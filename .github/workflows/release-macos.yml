name: Release macOS

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest-stable'
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Extract version from tag (remove 'v' prefix)
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Install create-dmg
      run: |
        brew install create-dmg
        
    - name: Build macOS App
      run: |
        # Clean build directory
        rm -rf build/
        mkdir -p build/
        
        # Build the archive without code signing for CI
        xcodebuild -project "ArXiv Finder.xcodeproj" \
                   -scheme "ArXiv Finder" \
                   -configuration Release \
                   -destination 'platform=macOS' \
                   -derivedDataPath build \
                   -archivePath "build/ArXiv Finder.xcarchive" \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   archive
                   
    - name: Export App Bundle
      run: |
        # Create export options plist without code signing
        cat > exportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>teamID</key>
            <string></string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <false/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        # Export the app bundle without code signing
        xcodebuild -exportArchive \
                   -archivePath "build/ArXiv Finder.xcarchive" \
                   -exportPath "build/export" \
                   -exportOptionsPlist exportOptions.plist \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO
                   
    - name: Create DMG
      run: |
        # Create DMG with proper naming
        create-dmg \
          --volname "ArXiv Finder ${{ steps.get_version.outputs.version }}" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "ArXiv Finder.app" 175 120 \
          --hide-extension "ArXiv Finder.app" \
          --app-drop-link 425 120 \
          "build/ArXiv Finder-${{ steps.get_version.outputs.version }}.dmg" \
          "build/export/ArXiv Finder.app"
          
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: ArXiv Finder ${{ steps.get_version.outputs.version }}
        body: |
          ## ArXiv Finder ${{ steps.get_version.outputs.version }}
          
          ### What's New
          - Multiplatform support (iOS and macOS)
          - Advanced search functionality with real-time results
          - Category-based browsing (Computer Science, Mathematics, Physics, etc.)
          - Favorites system with local storage using SwiftData
          - Modern SwiftUI interface with native macOS optimizations
          - Search history for quick access to previous queries
          - Offline access to saved papers
          
          ### Installation
          1. Download the DMG file
          2. Open the DMG and drag ArXiv Finder to your Applications folder
          3. **Important**: Since this is a development build, you may need to allow it to run:
             - Right-click on ArXiv Finder in Applications
             - Select "Open" from the context menu
             - Click "Open" in the security dialog
          4. Launch ArXiv Finder from Applications
          
          ### Requirements
          - macOS 14.0+
          
          ### Features
          - **Advanced Search**: Search papers by title, author, keywords, or ArXiv ID
          - **Category Browsing**: Explore papers by scientific category
          - **Favorites System**: Save important papers for offline access
          - **Search History**: Remember and reuse previous searches
          - **Native Interface**: Optimized for macOS with NavigationSplitView
          - **Local Storage**: SwiftData-powered persistence for offline access
          
          ### Technical Details
          - Built with SwiftUI and SwiftData
          - Uses ArXivKit for robust API integration
          - Modern async/await concurrency
          - Comprehensive error handling
          
          ### Note on Code Signing
          This release is built without code signing for development purposes. Users may need to allow the app to run in System Preferences > Security & Privacy.
          
          ### Support
          For issues and feature requests, please visit the [GitHub repository](https://github.com/jhg45-ua/Arxiv-Finder).
        draft: false
        prerelease: false
        
    - name: Upload DMG to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/ArXiv Finder-${{ steps.get_version.outputs.version }}.dmg
        asset_name: ArXiv Finder-${{ steps.get_version.outputs.version }}.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload App Bundle to Release
      run: |
        # Create a zip file of the app bundle
        cd build/export
        zip -r "../ArXiv Finder-${{ steps.get_version.outputs.version }}.app.zip" "ArXiv Finder.app"
        cd ../..
        
    - name: Upload App Bundle ZIP to Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/ArXiv Finder-${{ steps.get_version.outputs.version }}.app.zip
        asset_name: ArXiv Finder-${{ steps.get_version.outputs.version }}.app.zip
        asset_content_type: application/zip
        
    - name: Clean up
      run: |
        rm -rf build/
        rm -f exportOptions.plist 