# GitLab CI/CD Pipeline for ArXiv App (macOS)
# Simple pipeline to build and create releases

stages:
  - build
  - release

variables:
  APP_NAME: "ArXiv App"
  SCHEME: "ArXiv App"
  PROJECT_PATH: "ArXiv App.xcodeproj"
  BUILD_PATH: "build"
  ZIP_NAME: "ArXiv-App"

build_app:
  stage: build
  tags:
    - macos
  script:
    - echo "Building app..."
    - mkdir -p "$BUILD_PATH"
    - echo "Extracting app version for later use"
    - APP_VERSION=$(xcodebuild -project "$PROJECT_PATH" -target "$APP_NAME" -showBuildSettings | grep MARKETING_VERSION | awk '{print $3}' | head -1)
    - BUILD_NUMBER=$(xcodebuild -project "$PROJECT_PATH" -target "$APP_NAME" -showBuildSettings | grep CURRENT_PROJECT_VERSION | awk '{print $3}' | head -1)
    - echo "App Version:" "$APP_VERSION"
    - echo "Build Number:" "$BUILD_NUMBER"
    - echo "Capturing commit message..."
    - COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
    - echo "Commit Message:" "$COMMIT_MESSAGE"
    - echo "APP_VERSION=$APP_VERSION" > version.env
    - echo "BUILD_NUMBER=$BUILD_NUMBER" >> version.env
    - echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> version.env
    - xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -configuration Release -derivedDataPath "$BUILD_PATH"
    - cp -R "$BUILD_PATH/Build/Products/Release/$APP_NAME.app" "./$APP_NAME.app"
  artifacts:
    paths:
      - "$APP_NAME.app"
      - "version.env"
    reports:
      dotenv: version.env
    expire_in: 1 week
  only:
    - main
    - develop
    - merge_requests

release_app:
  stage: release
  tags:
    - macos
  script:
    - echo "Creating release for version $APP_VERSION (build $BUILD_NUMBER)..."
    #- echo "Commit message: $COMMIT_MESSAGE"
    - RELEASE_NAME="ArXiv-App-v$APP_VERSION-build$BUILD_NUMBER"
    - zip -r "$RELEASE_NAME.zip" "$APP_NAME.app"
    - glab release create "v$APP_VERSION-build$BUILD_NUMBER" "$RELEASE_NAME.zip" --name "ArXiv App v$APP_VERSION (Build $BUILD_NUMBER)" --notes "ArXiv App v$APP_VERSION - $COMMIT_MESSAGE"
  only:
    - main
